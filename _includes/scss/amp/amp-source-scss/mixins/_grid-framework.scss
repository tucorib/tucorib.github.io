// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$amp-grid-columns`.

@mixin create-grid-columns($amp-columns: $amp-grid-columns, $amp-gutter: $amp-grid-gutter-width, $amp-breakpoints: $amp-grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $amp-gutter / 2;
    padding-left: $amp-gutter / 2;
  }

  @each $amp-breakpoint in map-keys($amp-breakpoints) {
    $infix: breakpoint-infix($amp-breakpoint, $amp-breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $amp-columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($amp-breakpoint, $amp-breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      @for $i from 1 through $amp-grid-row-columns {
        .row-cols#{$infix}-#{$i} {
          @include row-cols($i);
        }
      }

      .col#{$infix}-auto {
        @include create-amp-columns-auto();
      }

      @for $i from 1 through $amp-columns {
        .col#{$infix}-#{$i} {
          @include create-amp-columns($i, $amp-columns);
        }
      }
      
      @if $enable-amp-grid-columns-order {
	      .order#{$infix}-first { order: -1; }
	
	      .order#{$infix}-last { order: $amp-columns + 1; }
	
	      @for $i from 0 through $amp-columns {
	        .order#{$infix}-#{$i} { order: $i; }
	      }
	    }

      // `$amp-columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($amp-columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            @include create-amp-columns-offset($i, $amp-columns);
          }
        }
      }
    }
  }
}
